import React, { useState } from 'react';
import { Download, FileText, Save, Music } from 'lucide-react';

interface ExportManagerProps {
  analysisResults: any;
  audioData: {
    buffer: AudioBuffer;
    file?: File;
    metadata?: any;
  };
}

const ExportManager: React.FC<ExportManagerProps> = ({ analysisResults, audioData }) => {
  const [exportFormat, setExportFormat] = useState<'json' | 'txt' | 'csv'>('json');
  const [isExporting, setIsExporting] = useState(false);

  const generateExportData = () => {
    const data = {
      metadata: {
        filename: audioData.file?.name || 'recorded_audio',
        duration: audioData.buffer.duration,
        sampleRate: audioData.buffer.sampleRate,
        channels: audioData.buffer.numberOfChannels,
        exportTime: new Date().toISOString(),
        ...audioData.metadata
      },
      analysis: {
        estimatedBPM: analysisResults.estimatedBpm,
        confidence: analysisResults.confidence,
        totalBeats: analysisResults.beats?.length || 0,
        beatTimings: analysisResults.beats || [],
        onsets: analysisResults.onsets || [],
        accuracy: analysisResults.accuracy
      },
      statistics: {
        avgBeatInterval: analysisResults.beats?.length > 1 ? 
          (analysisResults.beats[analysisResults.beats.length - 1] - analysisResults.beats[0]) / (analysisResults.beats.length - 1) : 0,
        beatsPerSecond: analysisResults.beats?.length / audioData.buffer.duration || 0
      }
    };

    return data;
  };

  const exportAsJSON = () => {
    const data = generateExportData();
    const jsonString = JSON.stringify(data, null, 2);
    return { content: jsonString, mimeType: 'application/json', extension: 'json' };
  };

  const exportAsText = () => {
    const data = generateExportData();
    let textContent = `BeatScope Analysis Report
=====================================

File Information:
- Filename: ${data.metadata.filename}
- Duration: ${data.metadata.duration.toFixed(2)} seconds
- Sample Rate: ${data.metadata.sampleRate} Hz
- Channels: ${data.metadata.channels}
- Export Time: ${data.metadata.exportTime}

Analysis Results:
- Estimated BPM: ${data.analysis.estimatedBPM?.toFixed(2) || 'N/A'}
- Confidence: ${((data.analysis.confidence || 0) * 100).toFixed(1)}%
- Total Beats Detected: ${data.analysis.totalBeats}
- Accuracy: ${((data.analysis.accuracy || 0) * 100).toFixed(1)}%

Beat Timings (seconds):
`;

    if (data.analysis.beatTimings.length > 0) {
      textContent += data.analysis.beatTimings
        .map((beat: number, index: number) => `${(index + 1).toString().padStart(3, ' ')}: ${beat.toFixed(3)}s`)
        .join('\n');
    } else {
      textContent += 'No beats detected';
    }

    textContent += `

Statistics:
- Average Beat Interval: ${data.statistics.avgBeatInterval.toFixed(3)} seconds
- Beats per Second: ${data.statistics.beatsPerSecond.toFixed(2)}

Generated by BeatScope - Music Tempo & Beat Tracking App`;

    return { content: textContent, mimeType: 'text/plain', extension: 'txt' };
  };

  const exportAsCSV = () => {
    const data = generateExportData();
    let csvContent = 'Beat Number,Time (seconds),Interval (seconds)\n';
    
    if (data.analysis.beatTimings.length > 0) {
      data.analysis.beatTimings.forEach((beat: number, index: number) => {
        const interval = index > 0 ? beat - data.analysis.beatTimings[index - 1] : 0;
        csvContent += `${index + 1},${beat.toFixed(3)},${interval.toFixed(3)}\n`;
      });
    }

    return { content: csvContent, mimeType: 'text/csv', extension: 'csv' };
  };

  const handleExport = async () => {
    setIsExporting(true);

    try {
      let exportData;
      switch (exportFormat) {
        case 'json':
          exportData = exportAsJSON();
          break;
        case 'txt':
          exportData = exportAsText();
          break;
        case 'csv':
          exportData = exportAsCSV();
          break;
        default:
          exportData = exportAsJSON();
      }

      const blob = new Blob([exportData.content], { type: exportData.mimeType });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      
      const filename = audioData.file?.name || 'audio_analysis';
      const baseName = filename.replace(/\.[^/.]+$/, '');
      link.download = `${baseName}_beatscope_analysis.${exportData.extension}`;
      
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);

    } catch (error) {
      console.error('Export error:', error);
      alert('Failed to export data. Please try again.');
    } finally {
      setIsExporting(false);
    }
  };

  const getFormatIcon = (format: string) => {
    switch (format) {
      case 'json':
        return <FileText className="h-4 w-4" />;
      case 'txt':
        return <FileText className="h-4 w-4" />;
      case 'csv':
        return <Save className="h-4 w-4" />;
      default:
        return <FileText className="h-4 w-4" />;
    }
  };

  const getFormatDescription = (format: string) => {
    switch (format) {
      case 'json':
        return 'Structured data with full analysis results';
      case 'txt':
        return 'Human-readable report format';
      case 'csv':
        return 'Spreadsheet format for beat timings';
      default:
        return '';
    }
  };

  return (
    <section className="bg-gray-900/50 border border-blue-500/30 rounded-xl p-6 space-y-6">
      <div className="flex items-center space-x-3">
        <Download className="h-6 w-6 text-yellow-400" />
        <h3 className="text-lg font-semibold text-white">Export Analysis</h3>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        {(['json', 'txt', 'csv'] as const).map((format) => (
          <button
            key={format}
            onClick={() => setExportFormat(format)}
            className={`p-4 rounded-lg border transition-all duration-300 ${
              exportFormat === format
                ? 'border-yellow-500 bg-yellow-500/10 text-yellow-400'
                : 'border-gray-600 bg-gray-800/50 text-gray-300 hover:border-gray-500 hover:bg-gray-700/50'
            }`}
          >
            <div className="flex items-center justify-center space-x-2 mb-2">
              {getFormatIcon(format)}
              <span className="font-medium uppercase">{format}</span>
            </div>
            <p className="text-xs opacity-80">
              {getFormatDescription(format)}
            </p>
          </button>
        ))}
      </div>

      <div className="bg-gray-800/30 rounded-lg p-4">
        <h4 className="font-medium text-white mb-3">Export Preview</h4>
        <div className="grid grid-cols-2 gap-4 text-sm">
          <div>
            <span className="text-gray-400">Format:</span>
            <span className="text-white ml-2 uppercase">{exportFormat}</span>
          </div>
          <div>
            <span className="text-gray-400">Beats:</span>
            <span className="text-white ml-2">{analysisResults.beats?.length || 0}</span>
          </div>
          <div>
            <span className="text-gray-400">BPM:</span>
            <span className="text-white ml-2">{analysisResults.estimatedBpm?.toFixed(1) || 'N/A'}</span>
          </div>
          <div>
            <span className="text-gray-400">Duration:</span>
            <span className="text-white ml-2">{audioData.buffer.duration.toFixed(2)}s</span>
          </div>
        </div>
      </div>

      <button
        onClick={handleExport}
        disabled={isExporting}
        className={`w-full flex items-center justify-center space-x-2 py-3 px-6 rounded-lg font-medium transition-all duration-300 ${
          isExporting
            ? 'bg-gray-600 text-gray-400 cursor-not-allowed'
            : 'bg-gradient-to-r from-yellow-500 to-yellow-600 text-black hover:from-yellow-400 hover:to-yellow-500 shadow-lg hover:shadow-yellow-500/25'
        }`}
      >
        {isExporting ? (
          <>
            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-gray-400"></div>
            <span>Exporting...</span>
          </>
        ) : (
          <>
            <Download className="h-4 w-4" />
            <span>Export Analysis Data</span>
          </>
        )}
      </button>
    </section>
  );
};

export default ExportManager;